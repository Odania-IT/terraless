package main

import (
	"bytes"
	"github.com/Odania-IT/terraless/schema"
	"github.com/Odania-IT/terraless/support"
	"github.com/Odania-IT/terraless/templates"
	"github.com/sirupsen/logrus"
	"os"
	"path/filepath"
	"runtime"
)

const (
	currentEnvironmentTemplate = `#!/usr/bin/env bash
{{ range $key, $val := . }}export {{ $key }}={{ $val }}
{{ end }}
`

	helperTemplate = `#!/usr/bin/env bash
terraless $@
source {{.TerralessDirectory}}/currentEnvironment.sh
`

	helperFunctionBaseTemplate = `#!/usr/bin/env bash
# This file is generated by terraless
`

	helperFunctionTemplate = `
function terraless-auth-{{.AliasName}}() {
	{{ .Command }}
}
`
)

func initHelperFunction(arguments schema.Arguments) {
	logrus.Debug("Verifying helper bash function exists")
	if runtime.GOOS == "windows" {
		logrus.Info("Can currently not create helper function for Windows")
		return
	}

	helperFile := filepath.Join(arguments.TerralessDirectory, "terraless-env")
	buffer := bytes.Buffer{}
	buffer = templates.RenderTemplateToBuffer(arguments, buffer, helperTemplate, "helper-template")

	err := os.MkdirAll(arguments.TerralessDirectory, 0755)
	if err != nil {
		logrus.Fatalf("Could not create plugin directory: %s\n", arguments.TerralessDirectory)
	}

	logrus.Infof("Creating or updating helper file %s\n", helperFile)
	support.WriteToFile(helperFile, buffer)

	err = os.Chmod(helperFile, 0755)
	if err != nil {
		logrus.Warnf("Can not make helper script executable: %s\n", helperFile)
	}

	writeEnvironmentFile(arguments, map[string]string{})
}

func writeEnvironmentFile(arguments schema.Arguments, environmentVariables map[string]string) {
	buffer := bytes.Buffer{}
	buffer = templates.RenderTemplateToBuffer(environmentVariables, buffer, currentEnvironmentTemplate, "current-environment-template")

	currentEnvironmentFile := filepath.Join(arguments.TerralessDirectory, "currentEnvironment.sh")
	logrus.Debugf("Writting environment to %s file\n", currentEnvironmentFile)
	support.WriteToFile(currentEnvironmentFile, buffer)
}

type HelperFunctionArgs struct {
	AliasName string
	Command   string
}

func createHelperFunctions(terralessData schema.TerralessData, terralessProviders []schema.Provider) {
	templateHelperFunctionsFile := filepath.Join(terralessData.Arguments.TerralessDirectory, "helper-functions.sh")
	logrus.Infof("Writing helper functions to %s file\n", templateHelperFunctionsFile)
	buffer := bytes.Buffer{}
	buffer = templates.RenderTemplateToBuffer(terralessData.Config, buffer, helperFunctionBaseTemplate, "helper-function-base-template")

	for _, team := range terralessData.GlobalConfig.Teams {
		logrus.Debugf("Processing team %s\n", team.Name)

		for _, provider := range team.Providers {
			logrus.Debugf("Processing provider %s\n", provider.Name)

			for _, role := range provider.Roles {
				logrus.Debugf("Processing role %s\n", role)
				aliasName := provider.Name + "-" + role

				command := "echo 'No provider generated the auth-helper code!'"
				for _, terralessProvider := range terralessProviders {
					if terralessProvider.CanHandle(provider.Type) {
						command = terralessProvider.GenerateHelperFunctionCommand(team.Name, provider.Name, role)
					}
				}

				data := HelperFunctionArgs{
					AliasName: aliasName,
					Command:   command,
				}

				buffer = templates.RenderTemplateToBuffer(data, buffer, helperFunctionTemplate, "helper-function-templates")
			}
		}
	}

	support.WriteToFile(templateHelperFunctionsFile, buffer)
}
