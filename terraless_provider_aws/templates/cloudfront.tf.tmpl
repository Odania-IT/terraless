## Terraless Cloudfront

{{ if .Cloudfront.LoggingEnabled }}
resource "aws_s3_bucket" "terraless-logging" {
  bucket = "{{.ProjectName}}-logging"
  acl = "private"

  versioning {
    enabled = false
  }

  lifecycle_rule {
    id = "{{.ProjectName}}-logging-lifecycle-rule"
    enabled = true

    expiration {
      days = 14
    }
  }
}
{{ end }}

resource "aws_cloudfront_origin_access_identity" "terraless-default" {
  comment = "cloudfront-distribution-{{.ProjectName}}"
}

locals {
  s3_origin_id = "s3-origin-{{.ProjectName}}"
}

resource "aws_cloudfront_distribution" "terraless-default" {
  {{ if stringNotEmpty .Cloudfront.Handler }}
  depends_on = [
    "aws_lambda_function.terraless-lambda-cloudfront"
  ]
  {{ end }}

  enabled = true
  is_ipv6_enabled = true
  price_class = "{{ .Cloudfront.PriceClass }}"
  aliases = [
    {{ range $key, $val := .Cloudfront.Aliases }}"{{ $val }}",
    {{ end }}
  ]

  {{ if .Cloudfront.LoggingEnabled }}
  logging_config = {
    bucket = "${aws_s3_bucket.terraless-logging.bucket_domain_name}"
    prefix = "{{.ProjectName}}"
  }
  {{ end }}

  origin {
    domain_name = "{{.Bucket}}.s3.${data.aws_region.current.name}.amazonaws.com"
    origin_path = "/{{ .Target }}"
    origin_id = "${local.s3_origin_id}"

    s3_origin_config {
      origin_access_identity = "${aws_cloudfront_origin_access_identity.terraless-default.cloudfront_access_identity_path}"
    }
  }

  viewer_certificate {
    {{ if .OwnCertificate }}acm_certificate_arn = "${aws_acm_certificate.{{ .Certificate.TerraformName }}.arn}"
    {{ else }}cloudfront_default_certificate = true
    {{ end }}
    ssl_support_method = "sni-only"
  }

  default_cache_behavior {
    allowed_methods = [
      "GET",
      "HEAD",
      "OPTIONS",
    ]
    cached_methods = [
      "GET",
      "HEAD",
    ]
    forwarded_values {
      query_string = true
      headers = [
        "Accept",
        "Authorization",
        "Content-Type",
        "Referer",
      ]
      cookies {
        forward = "all"
      }
    }
    target_origin_id = "${local.s3_origin_id}"

    viewer_protocol_policy = "redirect-to-https"
    default_ttl = {{ .Cloudfront.Caching.DefaultTTL }}
    min_ttl = {{ .Cloudfront.Caching.MinTTL }}
    max_ttl = {{ .Cloudfront.Caching.MaxTTL }}

    {{ if stringNotEmpty .Cloudfront.Handler }}
    lambda_function_association {
      event_type = "origin-request"
      lambda_arn = "${aws_lambda_function.terraless-lambda-cloudfront.qualified_arn}"
      include_body = false
    }
    {{ end }}

    {{ range $key, $val := .Cloudfront.LambdaFunctionAssociation }}
    lambda_function_association {
      event_type = "{{ $key }}"
      lambda_arn = "{{ $val }}"
      include_body = false
    }
    {{ end }}
  }

  restrictions {
    geo_restriction {
      restriction_type = "none"
      locations = []
    }
  }

  tags = "${var.terraless-default-tags}"
}

output "terraform-cloudfront-distribution-domain" {
  value = "${aws_cloudfront_distribution.terraless-default.domain_name}"
}

{{ if .Cloudfront.NoCreateBucket }}
{{ else }}
# Cloudfront Bucket
resource "aws_s3_bucket" "{{.ProjectName}}-{{.Environment}}" {
  bucket = "{{.Bucket}}"
  acl = "private"
}

data "aws_iam_policy_document" "{{.ProjectName}}-{{.Environment}}-origin-policy" {
  statement {
    actions   = ["s3:GetObject"]
    resources = ["${aws_s3_bucket.{{.ProjectName}}-{{.Environment}}.arn}/*"]

    principals {
      type        = "AWS"
      identifiers = ["${aws_cloudfront_origin_access_identity.terraless-default.iam_arn}"]
    }
  }

  statement {
    actions   = ["s3:ListBucket"]
    resources = ["${aws_s3_bucket.{{.ProjectName}}-{{.Environment}}.arn}"]

    principals {
      type        = "AWS"
      identifiers = ["${aws_cloudfront_origin_access_identity.terraless-default.iam_arn}"]
    }
  }
}

resource "aws_s3_bucket_policy" "{{.ProjectName}}-{{.Environment}}" {
  bucket = "${aws_s3_bucket.{{.ProjectName}}-{{.Environment}}.id}"
  policy = "${data.aws_iam_policy_document.{{.ProjectName}}-{{.Environment}}-origin-policy.json}"
}
{{ end }}
