# This file is generated by Terraless

resource "aws_s3_bucket" "terraless-logging" {
  bucket = "${var.project-name}-${var.environment}-logging"
  acl = "private"

  versioning {
    enabled = false
  }

  lifecycle_rule {
    id = "${var.project-name}-${var.environment}-logging-lifecycle-rule"
    enabled = true

    expiration {
      days = 14
    }
  }
}

resource "aws_cloudfront_origin_access_identity" "terraless-default" {
  comment = "cloudfront-distribution-{{.ProjectName}}"
}

locals {
  s3_origin_id = "s3-origin-{{.ProjectName}}"
}

resource "aws_cloudfront_distribution" "terraless-default" {
  depends_on = [
    "aws_lambda_function.terraless-lambda-cloudfront"
  ]

  enabled = true
  is_ipv6_enabled = true
  price_class = "{{ .Cloudfront.PriceClass }}"
  aliases = [
    {{ range $key, $val := .Cloudfront.Aliases }}"{{ $val }}",
    {{ end }}
  ]

  {{ if .Cloudfront.LoggingEnabled }}
  logging_config = {
    bucket = "${aws_s3_bucket.terraless-logging.bucket_domain_name}"
    prefix = "{{.ProjectName}}"
  }
  {{ end }}

  origin {
    domain_name = "{{.Bucket}}.s3.${data.aws_region.current.name}.amazonaws.com"
    origin_path = "/{{ .Target }}"
    origin_id = "${local.s3_origin_id}"

    s3_origin_config {
      origin_access_identity = "${aws_cloudfront_origin_access_identity.terraless-default.cloudfront_access_identity_path}"
    }
  }

  viewer_certificate {
    {{ if .OwnCertificate }}acm_certificate_arn = "${aws_acm_certificate.{{ .Certificate.TerraformName }}.arn}"
    {{ else }}cloudfront_default_certificate = true
    {{ end }}
    ssl_support_method = "sni-only"
  }

  default_cache_behavior {
    allowed_methods = [
      "GET",
      "HEAD",
      "OPTIONS",
    ]
    cached_methods = [
      "GET",
      "HEAD",
    ]
    forwarded_values {
      query_string = true
      headers = [
        "Accept",
        "Authorization",
        "Content-Type",
        "Referer",
      ]
      cookies {
        forward = "all"
      }
    }
    target_origin_id = "${local.s3_origin_id}"

    viewer_protocol_policy = "redirect-to-https"
    default_ttl = {{ .Cloudfront.Caching.DefaultTTL }}
    min_ttl = {{ .Cloudfront.Caching.MinTTL }}
    max_ttl = {{ .Cloudfront.Caching.MaxTTL }}
    
    lambda_function_association {
      event_type = "origin-request"
      lambda_arn = "${aws_lambda_function.terraless-lambda-cloudfront.qualified_arn}"
      include_body = false
    }
  }

  restrictions {
    geo_restriction {
      restriction_type = "none"
      locations = []
    }
  }
}
