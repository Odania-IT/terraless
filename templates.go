package main

import (
	"github.com/Sirupsen/logrus"
	"os"
	"path/filepath"
	"text/template"
)

var mainTfTemplate = `# This file is generated by Terraless

{{ range .Providers }}
provider "{{.Type}}" {
  {{ range $key, $value := .Data }}{{$key}} = "{{$value}}"
  {{ end }}
}
{{ end }}

{{ if .Backend }}
terraform {
	backend "{{ .Backend.Type }}" {
		{{ range $key, $value := .Backend.Data }}{{$key}} = "{{$value}}"
		{{ end }}
	}
}
{{ end }}

{{if .HasAwsProvider}}
data "aws_caller_identity" "current" {}
data "aws_region" "current" {}
{{ end }}
`

var lambdaPackageTemplate = `# This file is generated by Terraless

data "archive_file" "lambda-archive" {
  source_dir = "{{.Package.SourceDir}}"

  output_path = "{{.Package.OutputPath}}"
  type = "zip"
}

`

var lambdaFunctionsTemplate = `
# Lambda Function {{.FunctionName}}

resource "aws_cloudwatch_log_group" "lambda-log-{{.FunctionName}}" {
  name = "/aws/lambda/{{.FunctionName}}"
  retention_in_days = 14
}

resource "aws_lambda_function" "lambda-{{.FunctionName}}" {
  filename = "${data.archive_file.lambda-archive.output_path}"
  function_name = "{{.FunctionName}}"
  role = "{{.RoleArn}}"
  handler = "{{.Handler}}"
  source_code_hash = "${data.archive_file.lambda-archive.output_base64sha256}"
  runtime = "{{.Runtime}}"

  {{ if .RenderEnvironment }}
  environment {
    variables = {
      {{ range $key, $val := .Environment }}{{ $key }} = "{{ $val }}"
      {{ end }}
    }
  }
  {{ end }}
}
`

var simpleIamLambdaRoleTemplate = `# This file is generated by Terraless

resource "aws_iam_role" "terraless-lambda-iam-role" {
  name = "terraless-lambda-iam-role"

  assume_role_policy = "${data.aws_iam_policy_document.terraless-lambda-assume-role.json}"
}

data "aws_iam_policy_document" "terraless-lambda-assume-role" {
  statement {
    effect = "Allow"

    principals {
      identifiers = [
        "lambda.amazonaws.com"
      ]
      type = "Service"
    }
  }
}

data "aws_iam_policy_document" "terraless-lambda" {
  statement {
    effect = "Allow"

    actions = [
      "logs:CreateLogStream",
      "logs:PutLogEvents",
    ]

    resources = ["*"]
  }
}

resource "aws_iam_policy" "terraless-lambda-policy" {
  name = "terraless-lambda-policy"
  
  policy = "${data.aws_iam_policy_document.terraless-lambda.json}"
}

resource "aws_iam_role_policy_attachment" "terraless-lambda" {
  role = "${aws_iam_role.terraless-lambda-iam-role.name}"
  policy_arn = "${aws_iam_policy.terraless-lambda-policy.arn}"
}
`

func renderTemplate(config TerralessConfig, targetFileName string, tpl string) {
	targetFile, err := os.Create(targetFileName)
	if err != nil {
		logrus.Fatal("Failed creating file: ", filepath.Base(targetFileName), err)
	}

	tmpl := template.Must(template.New("main.tf").Parse(tpl))
	err = tmpl.Execute(targetFile, config)

	if err != nil {
		logrus.Fatal("Failed writing File: ", filepath.Base(targetFileName), err)
	}
}

func renderFunctionTemplate(config TerralessConfig, targetFileName string, tpl string) {
	targetFile, err := os.Create(targetFileName)
	if err != nil {
		logrus.Fatal("Failed creating file: ", filepath.Base(targetFileName), err)
	}

	_, err = targetFile.WriteString("# This file is generated by Terraless")
	if err != nil {
		logrus.Fatal("Failed writing File: ", filepath.Base(targetFileName), err)
	}

	var addTerralessLambdaRole bool
	for functionName, functionConfig := range config.Functions {
		logrus.Debug("Rendering Template for Lambda Function: ", functionName)
		functionConfig.RenderEnvironment = len(functionConfig.Environment) > 0
		functionConfig.FunctionName = functionName

		if functionConfig.RoleArn == "" {
			functionConfig.RoleArn = "${aws_iam_role.terraless-lambda-iam-role.arn}"
			addTerralessLambdaRole = true
		}

		tmpl := template.Must(template.New("main.tf").Parse(tpl))
		err = tmpl.Execute(targetFile, functionConfig)

		if err != nil {
			logrus.Fatal("Failed writing File: ", filepath.Base(targetFileName), err)
		}
	}

	if addTerralessLambdaRole {
		renderTemplate(config, filepath.Join(config.SourcePath, "terraless-lambda-iam.tf"), simpleIamLambdaRoleTemplate)
	}
}

func renderTemplates(config TerralessConfig) {
	renderTemplate(config, filepath.Join(config.SourcePath, "terraless-main.tf"), mainTfTemplate)

	if config.Package.SourceDir != "" {
		logrus.Debug("Creating package template")
		config.Package.OutputPath = filepath.Join(config.TargetPath, "lambda.zip")
		renderTemplate(config, filepath.Join(config.SourcePath, "terraless-package.tf"), lambdaPackageTemplate)
	}

	if len(config.Functions) > 0 {
		logrus.Debug("Creating function templates")
		renderFunctionTemplate(config, filepath.Join(config.SourcePath, "terraless-functions.tf"), lambdaFunctionsTemplate)
	}
}
